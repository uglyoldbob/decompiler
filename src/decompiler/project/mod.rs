//! Defines the code for generating the project code output.

pub mod autotools;

use std::path::PathBuf;

/// The trait that allows various build systems to be used.
#[enum_dispatch::enum_dispatch(BuildSystemEnum)]
pub trait BuildSystemTrait {
    /// Write the build files to the filesystem at the specified path
    fn write(&self, details: &ProjectDetails) -> Result<(), std::io::Error>;
}

/// The enumeration of all possible build systems.
#[enum_dispatch::enum_dispatch]
pub enum BuildSystemEnum {
    /// The autotools build system.
    Autotools(autotools::BuildSystem),
}

/// The details of the project
pub struct ProjectDetails {
    name: String,
    version: String,
    path: PathBuf,
}

impl ProjectDetails {
    pub fn new(pb: PathBuf) -> Self {
        Self {
            name: "project".to_string(),
            version: "0.1".to_string(),
            path: pb,
        }
    }
}

/// The culmination of everything generated by decompilation
pub struct Project {
    /// The build system for the project
    build: BuildSystemEnum,
    /// The details
    details: ProjectDetails,
}

impl Project {
    /// Create a project using the specified build system.
    pub fn new(b: BuildSystemEnum, pb: PathBuf) -> Self {
        Self {
            build: b,
            details: ProjectDetails::new(pb),
        }
    }

    /// Write all outputs to the specified path
    pub fn write(&self) {
        self.build.write(&self.details);
    }
}
